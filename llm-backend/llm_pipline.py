import os
import json
from dotenv import load_dotenv
from azure.ai.inference import ChatCompletionsClient
from azure.ai.inference.models import SystemMessage, UserMessage
from azure.core.credentials import AzureKeyCredential

load_dotenv()
token = os.getenv("GITHUB_API_KEY")
if not token:
    raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω GITHUB_API_KEY –≤ .env")

endpoint = "https://models.github.ai/inference"
model = "openai/gpt-4o-mini"

client = ChatCompletionsClient(
    endpoint=endpoint,
    credential=AzureKeyCredential(token),
)

examples = """
–ü—Ä–∏–º–µ—Ä:
–¢–µ–∫—Å—Ç: "–ö–æ–Ω—Ç—Ä–∞–∫—Ç ‚Ññ12345 –∑–∞–∫–ª—é—á—ë–Ω 12 –∞–ø—Ä–µ–ª—è 2024 –≥–æ–¥–∞ –º–µ–∂–¥—É –û–ê–û –ë–ú–ó –∏ –¢–û–û ¬´–ê–∑–∏—è–ú–µ—Ç–∏–∑–ö–æ–º–ø–ª–µ–∫—Ç¬ª. 
–î–æ–≥–æ–≤–æ—Ä –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ 31 –¥–µ–∫–∞–±—Ä—è 2025 –≥–æ–¥–∞. 
–°—É–º–º–∞ –¥–æ–≥–æ–≤–æ—Ä–∞ 100 000 000 —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ä—É–±–ª–µ–π. 
–í–∞–ª—é—Ç–∞ –¥–æ–≥–æ–≤–æ—Ä–∞ –∏ –ø–ª–∞—Ç–µ–∂–∞ ‚Äî —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —Ä—É–±–ª–∏."
JSON:
{
  "contract_number": "12345",
  "contract_date": "2024-04-12",
  "end_date": "2025-12-31",
  "counterparty": "–û–ê–û –ë–ú–ó",
  "country": "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ë–µ–ª–∞—Ä—É—Å—å",
  "amount": "100000000 —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —Ä—É–±–ª–∏",
  "contract_currency": "—Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —Ä—É–±–ª–∏",
  "payment_currency": "—Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —Ä—É–±–ª–∏"
}
"""

def extract_contract_json(text: str) -> dict:
    """
    Extract structured contract data from any text input.
    
    Args:
        text (str): Contract text to extract info from.
    
    Returns:
        dict: JSON with extracted fields.
    """
    response = client.complete(
        model=model,
        messages=[
            SystemMessage(
                f"""–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –¥–æ–≥–æ–≤–æ—Ä–∞.
–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –∏ –∑–∞–ø–æ–ª–Ω—è–π –≤—Å–µ –ø–æ–ª—è —Ç–æ—á–Ω–æ –ø–æ —Ç–µ–∫—Å—Ç—É –¥–æ–≥–æ–≤–æ—Ä–∞.
–ü—Ä–∞–≤–∏–ª–∞:
- –î–∞—Ç—ã –≤—Å–µ–≥–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.
- –°—É–º–º—É –∏–∑–≤–ª–µ–∫–∞–π —Ç–æ–ª—å–∫–æ –∫–∞–∫ —á–∏—Å–ª–æ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤–∞–ª—é—Ç—ã.
- –í–∞–ª—é—Ç–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∏ –ø–ª–∞—Ç–µ–∂–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —è–≤–Ω–æ –Ω–∞–∑–≤–∞–Ω—ã.
- –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ —É–∫–∞–∑—ã–≤–∞–π –ø–æ–ª–Ω–æ—Å—Ç—å—é, –±–µ–∑ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π.

{examples}
"""
            ),
            UserMessage(
                f"""–ò–∑–≤–ª–µ–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–æ–≥–æ–≤–æ—Ä–∞ –∏ –∑–∞–ø–æ–ª–Ω–∏ –ø–æ–ª—è:

–¢–µ–∫—Å—Ç –¥–æ–≥–æ–≤–æ—Ä–∞:
{text}
"""
            )
        ],
        temperature=0.2,
        top_p=1.0,
    )

    result_text = response.choices[0].message.content.strip()
    if result_text.startswith("```json"):
        result_text = result_text[len("```json"):].strip()
    elif result_text.startswith("```"):
        result_text = result_text[3:].strip()
    if result_text.endswith("```"):
        result_text = result_text[:-3].strip()

    # üîπ Parse JSON safely
    return json.loads(result_text)
