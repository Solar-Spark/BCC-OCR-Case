import os
import json
from docx import Document
from dotenv import load_dotenv
from azure.ai.inference import ChatCompletionsClient
from azure.ai.inference.models import SystemMessage, UserMessage
from azure.core.credentials import AzureKeyCredential

# üîë –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env
load_dotenv()
token = os.getenv("GITHUB_API_KEY")
if not token:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω GITHUB_API_KEY –≤ .env")

endpoint = "https://models.github.ai/inference"
model = "openai/gpt-4o-mini" 

client = ChatCompletionsClient(
    endpoint=endpoint,
    credential=AzureKeyCredential(token),
)

def load_docx_text(path: str) -> str:
    doc = Document(path)
    text = "\n".join([para.text.strip() for para in doc.paragraphs if para.text.strip()])
    return text

contract_text = load_docx_text("8A16.ocr(1).docx")

examples = """
–ü—Ä–∏–º–µ—Ä:
–¢–µ–∫—Å—Ç: "–ö–æ–Ω—Ç—Ä–∞–∫—Ç ‚Ññ12345 –∑–∞–∫–ª—é—á—ë–Ω 12 –∞–ø—Ä–µ–ª—è 2024 –≥–æ–¥–∞ –º–µ–∂–¥—É –û–ê–û –ë–ú–ó –∏ –¢–û–û ¬´–ê–∑–∏—è–ú–µ—Ç–∏–∑–ö–æ–º–ø–ª–µ–∫—Ç¬ª. 
–î–æ–≥–æ–≤–æ—Ä –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ 31 –¥–µ–∫–∞–±—Ä—è 2025 –≥–æ–¥–∞. 
–°—É–º–º–∞ –¥–æ–≥–æ–≤–æ—Ä–∞ 100 000 000 —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ä—É–±–ª–µ–π. 
–í–∞–ª—é—Ç–∞ –¥–æ–≥–æ–≤–æ—Ä–∞ –∏ –ø–ª–∞—Ç–µ–∂–∞ ‚Äî —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —Ä—É–±–ª–∏."
JSON:
{{
  "contract_number": "12345",
  "contract_date": "2024-04-12",
  "end_date": "2025-12-31",
  "counterparty": "–û–ê–û –ë–ú–ó",
  "country": "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ë–µ–ª–∞—Ä—É—Å—å",
  "amount": "100000000 —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —Ä—É–±–ª–∏",
  "contract_currency": "—Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —Ä—É–±–ª–∏",
  "payment_currency": "—Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —Ä—É–±–ª–∏"
}}
"""

# üöÄ –∑–∞–ø—Ä–æ—Å –≤ LLM
response = client.complete(
    model=model,
    messages=[
        SystemMessage(
            f"""–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –¥–æ–≥–æ–≤–æ—Ä–∞.
–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –∏ –∑–∞–ø–æ–ª–Ω—è–π –≤—Å–µ –ø–æ–ª—è —Ç–æ—á–Ω–æ –ø–æ —Ç–µ–∫—Å—Ç—É –¥–æ–≥–æ–≤–æ—Ä–∞.
–ü—Ä–∞–≤–∏–ª–∞:
- –î–∞—Ç—ã –≤—Å–µ–≥–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2024-04-12).
- –°—É–º–º—É –∏–∑–≤–ª–µ–∫–∞–π —Ç–æ–ª—å–∫–æ –∫–∞–∫ —á–∏—Å–ª–æ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: "100000000 —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —Ä—É–±–ª–∏").
- –í–∞–ª—é—Ç–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∏ –≤–∞–ª—é—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —è–≤–Ω–æ –Ω–∞–∑–≤–∞–Ω—ã ("—Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —Ä—É–±–ª–∏", "–¥–æ–ª–ª–∞—Ä—ã –°–®–ê"), –∞ –Ω–µ "–≤–∞–ª—é—Ç–∞ –¥–æ–≥–æ–≤–æ—Ä–∞".
- –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ —É–∫–∞–∑—ã–≤–∞–π –ø–æ–ª–Ω–æ—Å—Ç—å—é, –±–µ–∑ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π –∏–ª–∏ –≤—ã–¥—É–º–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

{examples}
"""
        ),
        UserMessage(
            f"""–ò–∑–≤–ª–µ–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–æ–≥–æ–≤–æ—Ä–∞ –∏ –∑–∞–ø–æ–ª–Ω–∏ —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è:
- ‚Ññ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
- –¥–∞—Ç–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞ (—Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD)
- –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞ (—Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD)
- –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç (–ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ)
- —Å—Ç—Ä–∞–Ω–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
- —Å—É–º–º–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –∏ –≤–∞–ª—é—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: "100000000 —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —Ä—É–±–ª–∏")
- –≤–∞–ª—é—Ç–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "—Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —Ä—É–±–ª–∏")
- –≤–∞–ª—é—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "—Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —Ä—É–±–ª–∏")

–¢–µ–∫—Å—Ç –¥–æ–≥–æ–≤–æ—Ä–∞:
{contract_text}
"""
        )
    ],
    temperature=0.2,
    top_p=1.0,
)

result_text = response.choices[0].message.content
print("\n=== –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ ===")
print(result_text)

try:
    result_json = json.loads(result_text)
    with open("contract_openai4omini.json", "w", encoding="utf-8") as f:
        json.dump(result_json, f, ensure_ascii=False, indent=2)
    print("‚úÖ JSON —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ contract_openai.json")
except Exception as e:
    print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ JSON:", e)
