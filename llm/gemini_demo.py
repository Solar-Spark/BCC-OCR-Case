import os
import json
from docx import Document
from dotenv import load_dotenv
import google.generativeai as genai

# üîë –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env
load_dotenv()
token = os.getenv("GEMINI_API_KEY")
if not token:
    raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω GEMINI_API_KEY –≤ .env")

# ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ Gemini
genai.configure(api_key=token)
model = genai.GenerativeModel("gemini-1.5-flash")  # –º–æ–∂–Ω–æ "gemini-1.5-pro"

# üìë —á–∏—Ç–∞–µ–º docx
def load_docx_text(path: str, max_chars: int = 14000) -> str:
    doc = Document(path)
    text = "\n".join([para.text.strip() for para in doc.paragraphs if para.text.strip()])
    return text[:max_chars]

contract_text = load_docx_text("8A16.ocr (1).docx")

# üéØ JSON Schema (–∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å)
schema = {
    "type": "object",
    "properties": {
        "contract_number": {"type": "string"},
        "contract_date": {"type": "string", "description": "–î–∞—Ç–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD"},
        "end_date": {"type": "string", "description": "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD"},
        "counterparty": {"type": "string"},
        "country": {"type": "string"},
        "amount": {"type": "string", "description": "–°—É–º–º–∞ –∏ –≤–∞–ª—é—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: '100000000 —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —Ä—É–±–ª–∏'"},
        "contract_currency": {"type": "string"},
        "payment_currency": {"type": "string"},
    },
    "required": [
        "contract_number",
        "contract_date",
        "end_date",
        "counterparty",
        "country",
        "amount",
        "contract_currency",
        "payment_currency",
    ]
}


# üöÄ –ó–∞–ø—Ä–æ—Å –∫ Gemini
response = model.generate_content(
    contents=f"""
–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –¥–æ–≥–æ–≤–æ—Ä–∞.
–ó–∞–ø–æ–ª–Ω–∏ –≤—Å–µ –ø–æ–ª—è —Å—Ç—Ä–æ–≥–æ –ø–æ —Ç–µ–∫—Å—Ç—É –¥–æ–≥–æ–≤–æ—Ä–∞.

–ò–∑–≤–ª–µ–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–æ–≥–æ–≤–æ—Ä–∞ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:
- ‚Ññ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
- –¥–∞—Ç–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏—è (YYYY-MM-DD)
- –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (YYYY-MM-DD)
- –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç
- —Å—Ç—Ä–∞–Ω–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
- —Å—É–º–º–∞ –¥–æ–≥–æ–≤–æ—Ä–∞ (—á–∏—Å–ª–æ –∏ –≤–∞–ª—é—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: "100000000 —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —Ä—É–±–ª–∏")
- –≤–∞–ª—é—Ç–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
- –≤–∞–ª—é—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞

–¢–µ–∫—Å—Ç –¥–æ–≥–æ–≤–æ—Ä–∞:
{contract_text}
""",
    generation_config=genai.GenerationConfig(
        response_schema=schema,
        response_mime_type="application/json",
    ),
)

# üìù structured output ‚Üí JSON
result_json = json.loads(response.text)

print("\n=== –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ ===")
print(json.dumps(result_json, ensure_ascii=False, indent=2))

# üíæ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
with open("contract_gemini.json", "w", encoding="utf-8") as f:
    json.dump(result_json, f, ensure_ascii=False, indent=2)

print("‚úÖ JSON —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ contract_gemini.json")
