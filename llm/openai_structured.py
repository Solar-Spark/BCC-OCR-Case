import os
import json
from docx import Document
from dotenv import load_dotenv
from azure.ai.inference import ChatCompletionsClient
from azure.ai.inference.models import SystemMessage, UserMessage
from azure.core.credentials import AzureKeyCredential

# üîë –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env
load_dotenv()
token = os.getenv("GITHUB_API_KEY")
if not token:
    raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω GITHUB_API_KEY –≤ .env")

endpoint = "https://models.github.ai/inference"
model = "deepseek/DeepSeek-V3-0324"

client = ChatCompletionsClient(
    endpoint=endpoint,
    credential=AzureKeyCredential(token),
)

# üìë —á–∏—Ç–∞–µ–º docx (–æ–±—Ä–µ–∑–∞–µ–º –ø–æ —Å–∏–º–≤–æ–ª–∞–º, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å –º–æ–¥–µ–ª—å)
def load_docx_text(path: str, max_chars: int = 14000) -> str:
    doc = Document(path)
    text = "\n".join([para.text.strip() for para in doc.paragraphs if para.text.strip()])
    return text[:max_chars]

contract_text = load_docx_text("8A16.ocr (1).docx")

# üéØ JSON Schema –¥–ª—è structured output
schema = {
    "name": "ContractInfo",
    "schema": {
        "type": "object",
        "properties": {
            "contract_number": {"type": "string"},
            "contract_date": {"type": "string", "description": "–î–∞—Ç–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD"},
            "end_date": {"type": "string", "description": "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD"},
            "counterparty": {"type": "string"},
            "country": {"type": "string"},
            "amount": {"type": "string", "description": "–°—É–º–º–∞ –∏ –≤–∞–ª—é—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: '100000000 —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —Ä—É–±–ª–∏'"},
            "contract_currency": {"type": "string"},
            "payment_currency": {"type": "string"},
        },
        "required": [
            "contract_number",
            "contract_date",
            "end_date",
            "counterparty",
            "country",
            "amount",
            "contract_currency",
            "payment_currency"
        ],
        "additionalProperties": False
    }
}

# üöÄ –∑–∞–ø—Ä–æ—Å –≤ LLM c structured outputs
response = client.complete(
    model=model,
    messages=[
        SystemMessage(
            """–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –¥–æ–≥–æ–≤–æ—Ä–∞.
–ó–∞–ø–æ–ª–Ω–∏ –≤—Å–µ –ø–æ–ª—è —Å—Ç—Ä–æ–≥–æ –ø–æ —Ç–µ–∫—Å—Ç—É –¥–æ–≥–æ–≤–æ—Ä–∞.
"""
        ),
        UserMessage(
            f"""–ò–∑–≤–ª–µ–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–æ–≥–æ–≤–æ—Ä–∞ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:
- ‚Ññ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
- –¥–∞—Ç–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏—è (YYYY-MM-DD)
- –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (YYYY-MM-DD)
- –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç
- —Å—Ç—Ä–∞–Ω–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
- —Å—É–º–º–∞ –¥–æ–≥–æ–≤–æ—Ä–∞ (—á–∏—Å–ª–æ –∏ –≤–∞–ª—é—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: "100000000 —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —Ä—É–±–ª–∏")
- –≤–∞–ª—é—Ç–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
- –≤–∞–ª—é—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞

–¢–µ–∫—Å—Ç –¥–æ–≥–æ–≤–æ—Ä–∞:
{contract_text}
"""
        )
    ],
    temperature=0.2,
    top_p=1.0,
    response_format={
        "type": "json_schema",
        "json_schema": schema
    }
)

# üìù structured output —É–∂–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ JSON
result_json = response.choices[0].message.parsed

print("\n=== –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ ===")
print(json.dumps(result_json, ensure_ascii=False, indent=2))

# üíæ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
with open("contract_deepseek.json", "w", encoding="utf-8") as f:
    json.dump(result_json, f, ensure_ascii=False, indent=2)

print("‚úÖ JSON —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ contract_deepseek.json")
